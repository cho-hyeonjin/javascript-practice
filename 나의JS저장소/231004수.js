// *
// *
// ? recap. environmentRecord에는 어떤 정보가 저장되나?
// ?        -> 해당 컨텍스트와 관련된 식별자 정보가 저장됩니다.
// ?        그럼 environmentalRecord는 뭐였지?
// ?        -> VariableEnvironment와 LexicalEnvironment의 구성요소입니다.
// ?        VariableEnvironment랑 LexicalEnvironment가 뭔데?
// ?        -> 실행 컨텍스트를 구성하는 요소들입니다.
// ?        실행 컨텍스트를 구성하는 것에는 어떤 것들이 있었지?
// ?        -> VariableEnvironment와 LexicalEnvironment, This바인딩입니다.
// *
// *
// * 9. 호이스팅이 뭐니?
// *    -> 호이스팅은 '끌어올리다'라는 동사를 명사화 시킨 단어입니다.
// *       자바스크립트가 코드를 해석하는 과정은 '평가'와 '실행' 두 단계로 나뉘는데,
// *       변수나 함수 선언부와 함수의 매개변수 등이 우리 인간이 보는 코드상에서는 함수 실행부 보다 아랫줄에 있음에도
// *       코드를 실행하면 변수가 함수보다 위에 있는 것처럼 보여지는 현상을 일컫는 말입니다.
// *
// ! 매개변수와 변수에 대한 호이스팅(1) - 원본 코드
// prettier-ignore
function a(x) { // 수집대상 1 - 매개변수(parameter)
  console.log(x);
  var x; // 수집대상 2 - 변수 선언
  console.log(x);
  var x = 2; // 수집대상 3 - 변수 선언
  console.log(x);
}
a(1);
// ! 매개변수와 변수에 대한 호이스팅(2) - 매개변수(parameter)를 변수 선언/할당과 같다고 간주해서 변환한 상태 // ⚠️ 아래는 실제 코드가 아니라 호이스팅 과정 설명을 위한 코드
// prettier-ignore
function a() { // 기존 매개변수 x가
  var x = 1; // 변수로 취급됨
  console.log(x);
  var x;
  console.log(x);
  var x = 2;
  console.log(x);
}
a();
// ! 매개변수와 변수에 대한 호이스팅(3) - 호이스팅 마친 상태 (평가 끝) // ⚠️ 아래는 실제 코드가 아니라 호이스팅 과정 설명을 위한 코드
function a() {
  var x;
  var x;
  var x;
  // 아래부터 실행부라고 보면 될 듯
  x = 1;
  console.log(x);
  console.log(x);
  x = 2;
  console.log(x);
}
a(1);

// ! 함수 선언의 호이스팅(1) - 원본 코드
function a() {
  console.log(b); // 1 --- 나의 예상: (1) undefined // 함수 a 평가 과정에서 등록된 b변수의 초기화값 이거나,
  //                                (2) f b() {} // 함수a 평가 과정에서 등록된 함수 b 일 것으로 예상
  //                       ->  정답: ƒ b() {}
  var b = "bbb"; // 수집대상 1 ( 변수 선언 )
  console.log(b); // 2 --- 나의 예상: "bbb" // 함수a의 실행 과정에서 바로 윗줄의 var b 에 "bbb" 값 재할당이 일어난 뒤에 읽히는 코드이기 때문에
  //                       ->  정답: "bbb"
  function b() {} // 수집대상 2 (함수 선언 )
  console.log(b); // 3 --- 나의 예상: "bbb" // b함수 안에는 b변수나 b함수가 없기 때문에 상위 스코프의 b인 "bbb"
  //                       ->  정답: "bbb"
}
a();
// -> 이유: a함수 실행 시, a함수 컨텍스트 생성,
//        이 때 변수 선언부 & 함수 수집(호이스팅)
//        (변수는 선언부만 수집되지만) 함수는 그냥 함수 전체가 수집됨
// ! 함수 선언의 호이스팅(2) - 호이스팅을 마친 상태 - ⚠️ 마찬가지로 함수 호이스팅 과정 설명 위한 코드. 실제 코드X
function a() {
  var b; // 수집대상 1 ( 변수 선언부만 끌어올려짐 & var로 선언됐으니 undefined로 자동 초기화까지 됨 )
  function b() {} // 수집대상 2 ( 함수 선언은 선언키워드 포함 바디까지 함수 전체가 끌어 올려짐 )
  console.log(b); // 1 --- f b(){}
  b = "bbb"; // 변수 할당부는 안 끌어올려지고 남아있음
  console.log(b); // 2 --- 'bbb'
  console.log(b); // 3 --- 'bbb'
}

// * 10. 호이스팅 규칙을 설명해 봐.
// * 11. 함수 선언문(function declaration)과 함수 표현식(function expression)의 차이를 호이스팅 개념을 곁들여 설명해보시오.
// *     -> 우선, 함수 선언문은 function키워드를 사용한 정의부만 존재하고 별도의 할당 명령이 없는 함수이며 함수명이 반드시 있어야 하는 함수입니다.
// *        함수 표현식은 변수에 함수를 할당하는 방식으로 정의한 함수로,
// *        함수명이 있는 '기명 함수 표현식'과 함수명이 없는 '익명함수 표현식'으로 나뉩니다.
// *        함수 선언문은 선언부만 존재하는 함수이기 때문에 평가 과정에서 함수 전체가 호이스팅 되지만,
// *        함수 표현식은 변수에 함수를 할당하는 개념이기 때문에 해당 함수가 할당된 변수 선언부만 호이스팅 됩니다.
