// * 1. 실행 컨텍스트란?
// *    -> 실행할 코드에 제공할 환경 정보들을 모아놓은 객체

// 실행 컨텍스트와 콜 스택 예제
// ---------------------------- 전역 컨텍스트 (최상단 공간은 코드 내부에 별도의 명령이 없어도 js파일 실행 시 브라우저가 자동으로 실행시킴. ∴ js파일 실행 시, 전역 컨텍스트가 활성화된다.)
var a = 1; //

function outer() {
  function inner() {
    console.log(a);
    var a = 3;
  }
  inner();
  console.log(a);
}

outer();

console.log(a);

// ----------------------------

// * 2. 실행 컨텍스트를 구성하는 방법은?
// *    -> 3가지. 1)전역공간 2)eval함수 실행 3)함수 실행

// * 3. 실행 컨텍스트가 활성화되면?
// *    -> JS엔진이 해당 실행 컨텍스트와 관련된 코드를 실행하는 데에 필요한 환경 정보들을 수집해서 실행 컨텍스트 객체에 저장
// *       (JS엔진이 활용할 목적으로 내부에서 생성하는 객체일 뿐, 개발자가 코드로 확인할 수 있는 객체는 아님.)

// * 4. JS엔진이 실행컨텍스트 객체에 환경정보를 저장할 때 담기는 정보는?
// *    -> 3가지. 1) VariableEnvironment
// *                a) 현재 컨텍스트 내의 식별자 정보
// *                b) 외부 환경 정보 (무엇?)
// *                c) 선언 시점의 LexicalEnvironment의 스냅샷
// *                     (LexicalEnvironmet 원본 모양. LexicalEnvironmet는 변경사항이 실시간으로 반영되어 바뀌는 놈이라 출고할 때의 사진을 찍어놓는 느낌인듯.)
// *             2) LexicalEnvirontment
// *                : 처음에는 VariableEnvriontment와 같지만 변경사항 실시간 반영
// *             3) ThisBinding
// *                : this식별자가 바라봐야 할 객체
