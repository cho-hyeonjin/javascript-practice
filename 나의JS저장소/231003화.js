// * 1. 실행 컨텍스트란?
// *    -> 실행할 코드에 제공할 환경 정보들을 모아놓은 객체

// 실행 컨텍스트와 콜 스택 예제
var a = 1;

function outer() {
  function inner() {
    console.log(a);
    var a = 3;
  }
  inner();
  console.log(a);
}

outer();

console.log(a);

// * 2. 실행 컨텍스트를 구성하는 방법은?
// *    -> 3가지. 1)전역공간 2)eval함수 실행 3)함수 실행

// * 3. 실행 컨텍스트가 활성화되면?
// *    -> JS엔진이 해당 실행 컨텍스트와 관련된 코드를 실행하는 데에 필요한 환경 정보들을 수집해서 실행 컨텍스트 객체에 저장
// *       (JS엔진이 활용할 목적으로 내부에서 생성하는 객체일 뿐, 개발자가 코드로 확인할 수 있는 객체는 아님.)

// * 4. JS엔진이 실행컨텍스트 객체에 환경정보를 저장할 때 담기는 정보는?
// *    -> 3가지. 1) VariableEnvironment
// *                a) 현재 컨텍스트 내의 식별자 정보
// *                b) 외부 환경 정보 (무엇?)
// *                : 선언 시점의 LexicalEnvironment의 스냅샷
// *                  (LexicalEnvironmet 원본. LexicalEnvironmet는 변경사항이 실시간으로 반영되어 바뀌는 놈이라 출고할 때의 사진을 찍어 놓는 느낌인듯.)
// *             2) LexicalEnvirontment
// *                : 처음에는 VariableEnvriontment와 같지만 변경사항 실시간 반영
// *             3) ThisBinding
// *                : this식별자가 바라봐야 할 객체

// * 5. VariableEnvironment란?
// *    -> LexicalEnvrionment의 초기 상태와 완전히 동일한 내용을 담고 있고, 이것이 유지되는 객체.(맞나요?)
// *       environmentRecord(현재 컨텍스트 내의 환경 정보(식별자))와 outerEnvrionmentReference(참조해야할 외부 환경 정보)로 구성되어 있다.

// * ==================================================================================================================================

// * 6. LexicalEnvironment란?
// *    -> Lexical을 우리 말로 해석하면 '언어의, 사전의'라는 뜻이고, 렉시컬 환경을 우리 말로 해석하면 '어휘적 환경'이라고 할 수 있음.
// *       여기서 '어휘'라는 건 컴퓨터 언어인 자바스크립트를 뜻하고, '환경'은 자바스크립트 엔진의 코드 해석에 작용하는 환경을 뜻함.
// *       실행 컨텍스트 활성화 시 JS엔진이 코드를 평가하고 실행하는데,
// *       평가 과정에서 해당 컨텍스트의 식별자 정보와 해당 식별자들이 참조하는 외부 환경 정보 등 (해당 컨텍스트의 환경 정보)을 자신(JS엔진)만 볼 수 있는 객체에 기록해 둠.
// *       이것을 실행 단계에서 마치 사전처럼 참고하면서 코드를 해석하고, 그 과정에서 일종의 문맥이 형성되는데, 이것을 'Lexical Environment' 라고 표현.
// *       정리하면 자바스크립트가 해당 컨텍스트의 환경 정보를 기록하고, 그 기록을 참조하면서 형성되는 코드 실행 문맥을 LexicalEnvironment라고 함.

// * 7. environmentRecord에 저장되는 정보는?
// *    -> 현재 컨텍스트와 관련된 식별자 정보들.
// *       함수에 지정된 매개변수 식별자, 선언된 함수, var로 선언된 변수의 식별자 (let, const는?)

// * 8. 전역 실행컨텍스트는 자바스크립트 내장객체와 호스트 객체 중 어떤 객체로 분류되나?
// *    -> 호스트 객체로 분류. 전역 실행컨텍스트는 자바스크립트가 생성하는 것이 아니라 구동 환경(브라우저 or Node.js)에서 제공하는 객체를 자바스크립트가 활용하는 개념.
// *       (ES11에서 globalThis로 통합되었지만 기존 window객체, global객체 사용도 아직 지원됨.)

// * 9.
